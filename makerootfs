#!/bin/bash

HOST_NAME=${HOST_NAME:-"linkstation.home"}
SUITE=${SUITE:-"wheezy"}

ROOTFS_FOLDER=rootfs
DATA_FOLDER=data
CLEAN_ROOTFS=$DATA_FOLDER/$SUITE-clean.txz
CONFIG_ROOTFS=$DATA_FOLDER/$SUITE-config.txz
DEBOOT_INCLUDES=mdadm,openssh-server
DEBIAN_REPO="http://ftp.br.debian.org/debian/"

if [ -f "scripts/$SUITE.sh" ]; then
	. scripts/$SUITE.sh
else
	echo "The debian suite $SUITE is not supported."
	exit 1
fi

function usage {
	cat <<- EOF
	$( basename $0 ) [-h] [rootfsdir]
	    -c	Configure a new rootfs
	    -d	Create new rootfs avoiding the cached
	    -h	This help
	    -r	Debian repository
	    -s	Debian SUITE [wheezy]
	EOF
}

function do_bootstrap {
	rm -rf $ROOTFS_FOLDER
	mkdir -p $ROOTFS_FOLDER

	qemu-debootstrap --arch armhf --include $DEBOOT_INCLUDES $SUITE $ROOTFS_FOLDER $DEBIAN_REPO
	chroot $ROOTFS_FOLDER apt-get clean
	tar -I pxz -cf $CLEAN_ROOTFS -C $ROOTFS_FOLDER .
}

function unpack_rootfs {
	rm -rf $ROOTFS_FOLDER
	mkdir -p $ROOTFS_FOLDER

	tar -Jxf $CLEAN_ROOTFS -C $ROOTFS_FOLDER
}

function create_rootfs {
	if [ -z "$FORCE_DEBOOTSTRAP" ] && [ -f $CLEAN_ROOTFS ]; then
		unpack_rootfs
	else
		do_bootstrap
	fi 
}

function config_rootfs {
	cnf_hostname $HOST_NAME
	cnf_hosts $HOST_NAME
	cnf_mdadm
	cnf_sources
	cnf_interfaces
	cnf_password $HOST_NAME
	cnf_locales
	cnf_tzdata
}

while getopts cdhr:s: opt; do
	case "$opt" in
		c) FORCE_CONFIG=1 ;;
		d) FORCE_DEBOOTSTRAP=1 ;;
		r) DEBIAN_REPO=${OPTARG} ;;
		s) SUITE=${OPTARG} ;;
		h) usage ;;
	esac
done

STATE="START"
while [ $STATE != "DONE" ]; do
	case $STATE in
		START)
			[ -n "$FORCE_DEBOOTSTRAP" ] && { do_bootstrap; STATE="CACHED"; continue; }
			[ -f "$CLEAN_ROOTFS" ] && { STATE="CACHED"; continue; }
			;;
		CACHED)
			[ -n "$FORCE_CONFIG" ] && { unpack_rootfs; config_rootfs; STATE="DONE"; continue; }
			[ -f "$CONFIG_ROOTFS" ] && { STATE="DONE"; continue; }
			;;
	esac
done
echo "Rootfs is ready at $CONFIG_ROOTFS"

